给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:
输入: [0,1,0,3,12]
输出: [1,3,12,0,0]

说明:
必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。

//题解一：
class Solution {
    public void moveZeroes(int[] nums) {
        int k=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0){
                swap(nums,i,k);
                k++;
            }
        }    
    }
     public void swap(int[] nums,int i,int k){
            if(i==k){
                return;
            }
            else{
                int temp = nums[i];
                nums[i] = nums[k];
                nums[k] = temp;
            }         
        }
}

//题解二
//思路是这样的，所谓要把0移动到数组后面，其实就是把非0数给移动到数组前面，而每个非0数需要移动的步数其实就是这个非0数前面0的个数。
//例如题目中的case：[0, 1, 0, 3, 2]
//那就是1需要移动1步，3和2需要移动两步。在完成这三个数的移动后，将后面补0即可。
class Solution {
    public void moveZeroes(int[] nums) {
        int count = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == 0) {
                count++;
            }else {
                nums[i - count] = nums[i];
            }
        }
        for(int i = nums.length - count; i < nums.length; i++) {
            nums[i] = 0;
        }
    }
}

