package com.dlmu.背包;

public class Kanpsack {
    //ZeroOneBag  01背包
    /**
     *
     * @param N 物体个数
     * @param V 背包载重
     * @param weight 存储每个物体的重量
     * @param value 存储每个物体的收益
     * @param F 二维数组，用来保存每种状态下的最大收益
     * @return
     */
    public int maxProfit(int N, int V, int[] weight, int[] value, int[][] F ){
        //对二维数组F进行初始化
        for(int j = 0; j <= V; j++) {
            F[0][j] = 0;
        }

        //注意边界问题，i是从1开始的，j是从0开始的
        //因为F[i - 1][j]中i要减1
        for (int i=1; i<=N; i++){
            for (int j=0; j<=V; j++){
                if(weight[i] < j){
                    F[i][j] = F[i-1][j];
                }else{
                    F[i][j] = Math.max(F[i-1][j], F[i-1][j-weight[i]]+value[i]);
                }
            }
        }
        return F[N][V];
    }

}
